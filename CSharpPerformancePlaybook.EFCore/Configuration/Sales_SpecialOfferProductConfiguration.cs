// <auto-generated>
// ReSharper disable All

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace CSharpPerformancePlaybook.EFCore
{
    // SpecialOfferProduct
    public class Sales_SpecialOfferProductConfiguration : IEntityTypeConfiguration<Sales_SpecialOfferProduct>
    {
        public void Configure(EntityTypeBuilder<Sales_SpecialOfferProduct> builder)
        {
            builder.ToTable("SpecialOfferProduct", "Sales");
            builder.HasKey(x => new { x.SpecialOfferId, x.ProductId }).HasName("PK_SpecialOfferProduct_SpecialOfferID_ProductID").IsClustered();

            builder.Property(x => x.SpecialOfferId).HasColumnName(@"SpecialOfferID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Sales_SpecialOffer).WithMany(b => b.Sales_SpecialOfferProducts).HasForeignKey(c => c.SpecialOfferId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID");

            builder.HasIndex(x => x.Rowguid).HasDatabaseName("AK_SpecialOfferProduct_rowguid").IsUnique();
            builder.HasIndex(x => x.ProductId).HasDatabaseName("IX_SpecialOfferProduct_ProductID");
        }
    }

}
// </auto-generated>
