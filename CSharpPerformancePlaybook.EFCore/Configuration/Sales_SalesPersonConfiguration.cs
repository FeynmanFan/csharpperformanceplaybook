// <auto-generated>
// ReSharper disable All

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace CSharpPerformancePlaybook.EFCore
{
    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // SalesPerson
    public class Sales_SalesPersonConfiguration : IEntityTypeConfiguration<Sales_SalesPerson>
    {
        public void Configure(EntityTypeBuilder<Sales_SalesPerson> builder)
        {
            builder.ToTable("SalesPerson", "Sales");
            builder.HasKey(x => x.BusinessEntityId).HasName("PK_SalesPerson_BusinessEntityID").IsClustered();

            builder.Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.TerritoryId).HasColumnName(@"TerritoryID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SalesQuota).HasColumnName(@"SalesQuota").HasColumnType("money").IsRequired(false);
            builder.Property(x => x.Bonus).HasColumnName(@"Bonus").HasColumnType("money").IsRequired();
            builder.Property(x => x.CommissionPct).HasColumnName(@"CommissionPct").HasColumnType("smallmoney").IsRequired();
            builder.Property(x => x.SalesYtd).HasColumnName(@"SalesYTD").HasColumnType("money").IsRequired();
            builder.Property(x => x.SalesLastYear).HasColumnName(@"SalesLastYear").HasColumnType("money").IsRequired();
            builder.Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Sales_SalesTerritory).WithMany(b => b.Sales_SalesPersons).HasForeignKey(c => c.TerritoryId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SalesPerson_SalesTerritory_TerritoryID");

            builder.HasIndex(x => x.Rowguid).HasDatabaseName("AK_SalesPerson_rowguid").IsUnique();
        }
    }

}
// </auto-generated>
