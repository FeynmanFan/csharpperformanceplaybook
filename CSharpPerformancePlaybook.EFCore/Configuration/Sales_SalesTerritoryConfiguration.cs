// <auto-generated>
// ReSharper disable All

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace CSharpPerformancePlaybook.EFCore
{
    // SalesTerritory
    public class Sales_SalesTerritoryConfiguration : IEntityTypeConfiguration<Sales_SalesTerritory>
    {
        public void Configure(EntityTypeBuilder<Sales_SalesTerritory> builder)
        {
            builder.ToTable("SalesTerritory", "Sales");
            builder.HasKey(x => x.TerritoryId).HasName("PK_SalesTerritory_TerritoryID").IsClustered();

            builder.Property(x => x.TerritoryId).HasColumnName(@"TerritoryID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CountryRegionCode).HasColumnName(@"CountryRegionCode").HasColumnType("nvarchar(3)").IsRequired().HasMaxLength(3);
            builder.Property(x => x.Group).HasColumnName(@"Group").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.SalesYtd).HasColumnName(@"SalesYTD").HasColumnType("money").IsRequired();
            builder.Property(x => x.SalesLastYear).HasColumnName(@"SalesLastYear").HasColumnType("money").IsRequired();
            builder.Property(x => x.CostYtd).HasColumnName(@"CostYTD").HasColumnType("money").IsRequired();
            builder.Property(x => x.CostLastYear).HasColumnName(@"CostLastYear").HasColumnType("money").IsRequired();
            builder.Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            builder.HasIndex(x => x.Name).HasDatabaseName("AK_SalesTerritory_Name").IsUnique();
            builder.HasIndex(x => x.Rowguid).HasDatabaseName("AK_SalesTerritory_rowguid").IsUnique();
        }
    }

}
// </auto-generated>
